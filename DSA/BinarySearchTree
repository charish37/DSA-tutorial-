class Node {
    constructor(val) {
        this.val = val;
        this.left = null;
        this.right = null;
    }
}

class BinarySearchTree {
    constructor() {
        this.root = null;
    }

    insert(val) {
        let newNode = new Node(val);
        let current = this.root;
        if(this.root == null){
            this.root = newNode;
            return this;
        } else {
            while(true){
                if(current.val > val){
                    if(current.left == null){
                        current.left = newNode;
                        return this;
                    } else {
                        current = current.left;
                    }
                } else if(current.val < val){
                    if(current.right == null) {
                        current.right = newNode;
                        return this;
                    } else {
                        current = current.right;
                    }
                } else if(current.val == val) return undefined;
            }
        }
    } 

    find(val) {
        let current = this.root;
        let found = false;
       if(this.root == null) return false;
       while(current && !found) {
        if(val > current.val) {
            current = current.right;
        } else if(val < current.val) {
            current = current.left;
        } else {
            found = true;
        }
       }

       if(!found) return false;
       return current;
    }

    BFS() {
        let node = this.root;
        let data = [], queue = [];
        queue.push(node);
        while(queue.length) {
            node = queue.shift();
            data.push(node.val);
            if(node.left) {
                queue.push(node.left)
            } 
            if(node.right) queue.push(node.right)
        } 
         return data;
    }

    DFSPreOrder() {
        let current = this.root;
        let visited = [];
        function HelperFunc(node) {
           visited.push(node.val);
           if(node.left) HelperFunc(node.left);
           if(node.right) HelperFunc(node.right);
        }
        HelperFunc(current);
        return visited;
    }

    DFSPostOrder() {
        let current = this.root;
        let visited = [];
        function HelperFunc(node) {
           if(node.left) HelperFunc(node.left);
           if(node.right) HelperFunc(node.right);
           visited.push(node.val);
        }
        HelperFunc(current);
        return visited;
    }

    DFSInOrder() {
        let current = this.root;
        let visited = [];
        function HelperFunc(node) {
           if(node.left) HelperFunc(node.left);
           visited.push(node.val);
           if(node.right) HelperFunc(node.right);
        }
        HelperFunc(current);
        return visited;
    }
}

let tree = new BinarySearchTree();
tree.insert(10);
tree.insert(5);
tree.insert(2);
tree.insert(7);
tree.insert(13);
tree.insert(11);
tree.insert(18);
tree.BFS();

console.log(tree.DFSInOrder())

// When to use BFS and DFS?

// 1. Time complexity for both BFS and DFS are same.

// 2.  BFS - If tree is very wide with more number of childrens for eg if we have 5 levels of binary search tree. Then storing all values in the queue consume more VideoColorSpace. Which increase the complexity.
//     so in that case it is better to use DFS than BFS as DFS only store dept of levels i.e 5 nodes in the above case. If we have a binary tree which has only one right children for 20 levels. i.e tree is growing in a 
//     linear direction towards right. In that case BFS is best solution. So, by using BFS we need to keep track of only one node.

// In DFS when to use preOrder, PostOrder and InOrder

//1. InOrder is used for binary search tree. As we get all nodes of tree in their underlying order. For eg: to print all node values in ascending order
//2.  PreOrder is used to export a tree structure as it is easy to copy or reconstruct a tree.
//3. PostOrder is used for backtracking or deleting of nodes in a tree.


//      10
//   5      13
// 2   7  11   18

// console.log(JSON.stringify(tree))
